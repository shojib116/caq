// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Subject {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  text          String        @unique
  personnels    Personnel[]   @relation(fields: [personnelIDs], references: [id])
  personnelIDs  String[]      @db.ObjectId
  questions     Question[]
}

model Question {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  subject       Subject       @relation(fields: [subjectID], references: [id])
  subjectID     String        @db.ObjectId
  personnels    Personnel[]   @relation(fields: [personnelIDs], references: [id])
  personnelIDs  String[]      @db.ObjectId
  text          String        
  level         Int
}

model Personnel {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  designation   String        @unique
  priority      Int           
  subjects      Subject[]     @relation(fields: [subjectIDs], references: [id])
  subjectIDs    String[]      @db.ObjectId
  questions     Question[]    @relation(fields: [questionIDs], references: [id])
  questionIDs   String[]      @db.ObjectId
}

model FormHeader {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  centerText    String
  formNumber    String?
  issue         String?
  revision      String?
  date          DateTime? 
}


model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  role          String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}


model Authenticator {
  id                   String  @id @default(auto()) @map("_id") @db.ObjectId
  credentialID         String  @unique
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}
